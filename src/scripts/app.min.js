const Modal={open(){document.querySelector(".modal__overlay").classList.add("active")},close(){document.querySelector(".modal__overlay").classList.remove("active")}},Utils={formatAmount:value=>(value*=100,Math.round(value)),curr(value){const signal=Number(value)<0?"-":"";return value=String(value).replace(/\D/g,""),signal+(value=(value=Number(value)/100).toLocaleString("pt-BR",{style:"currency",currency:"BRL"}))},formatDate(date){const splittedDate=date.split("-");return` ${splittedDate[2]}/${splittedDate[1]}/${splittedDate[0]}`}},Storage={get:()=>JSON.parse(localStorage.getItem("dev.finances:transactions"))||[],set(transaction){localStorage.setItem("dev.finances:transactions",JSON.stringify(transactions.data))}},transactions={data:Storage.get(),add(Transaction){transactions.data.push(Transaction),App.reload()},remove(index){transactions.data.splice(index,1),App.reload()},income(){let income=0;return transactions.data.forEach(transactions=>{transactions.amount>0&&(income+=transactions.amount)}),income},expense(){let expense=0;return transactions.data.forEach(transactions=>{transactions.amount<1&&(expense+=transactions.amount)}),expense},total:()=>transactions.income()+transactions.expense()},DOM={dataContainer:document.querySelector("#data__table tbody"),addTransaction(transactions,index){const tr=document.createElement("tr");tr.innerHTML=DOM.insertData(transactions,index),tr.dataset.index=index,DOM.dataContainer.appendChild(tr)},insertData(transactions,index){const debit=transactions.amount>0?"income":"expense",amount=Utils.curr(transactions.amount),model=`\n       \n        <td class="description"> ${transactions.description} </td>\n        <td class="${debit}"> ${amount} </td>\n        <td class="date"> ${transactions.date} </td>\n        <td> <img id='minus' onclick=" transactions.remove(${index})" src="./src/assets/minus.svg" alt="remover transaÃ§ao"></td>\n        \n      `;return model},upBalance(){document.querySelector("#incomeView").innerHTML=Utils.curr(transactions.income()),document.getElementById("expenseView").innerHTML=Utils.curr(transactions.expense()),document.querySelector("#totalView").innerHTML=Utils.curr(transactions.total())},clearTransa(){DOM.dataContainer.innerHTML=""}},Form={formData:{description:document.querySelector("#description"),amount:document.querySelector("#amount"),date:document.querySelector("#date")},getValues:()=>({description:Form.formData.description.value,amount:Form.formData.amount.value,date:Form.formData.date.value}),validateFields(){const{description:description,amount:amount,date:date}=Form.getValues();if(""===description.trim()||""===amount.trim()||""===date.trim())throw new Error("Preencha todos os campos")},formatData(){let{description:description,amount:amount,date:date}=Form.getValues();return amount=Utils.formatAmount(amount),date=Utils.formatDate(date),{description:description,amount:amount,date:date}},clearFields(){Form.formData.description.value="",Form.formData.amount.value="",Form.formData.date.value=""},submit(event){event.preventDefault();try{Form.validateFields();const newTransaction=Form.formatData();transactions.add(newTransaction),Form.clearFields(),Modal.close()}catch(error){alert(error.message)}}},App={init(){transactions.data.forEach(DOM.addTransaction),DOM.upBalance(),Storage.set(transactions.data)},reload(){DOM.clearTransa(),App.init()}};App.init();